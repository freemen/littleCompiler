#include "public.h"
#include "symbolTable.h"
Token *token;			//token 
int wordLen;			//to receive the length of the token

int oldNext; 			//mark down the old "next" which haven't been push in the reduction
int next;					//point to the next element to push in stack

int state;				//the current state

#define accept -999
//the table is describe [elements to states]
//...
//char* gotoHeader[] = {};
int gotoTable[42][40] = {{0,0,0, 5,0, 6, 7, 8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0},{0,0,0, 5,0, 6, 7, 8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,accept,9,2,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0},{0,0,0,-23,-23,-23,-23,-23,0,-23,0,0,0,0,0,0,0,0,0,0,0,0,-23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-12,0, 12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,11,0,0,0,0},{0,0,0,-25,-25,-25,-25,-25,0,-25,0,0,0,0,0,0,0,0,0,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0, 5,0, 6, 7, 8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,2,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-8,0,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-9,0,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0, 5,0, 6, 7, 8,0, 14,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0},{-16,0,0,0,0,0,0,0,0,0,0, 18, 19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,16,0,0,0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0, 20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-12,0, 12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0},{0,0,0, 5, 22, 6, 7, 8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0},{0,0,0,-24,-24,-24,-24,-24,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{ 24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,26,0,0,0,0,0},{0,0,0,0,0,0,0,0,-12,0, 12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,11,0,0,0,0},{0,0,0,0,0,0,0,0,-14,0,-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0, 28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{-10,0,0,0,0,0,0,0,0,0,0,-10,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,-26,-26,-26,-26,-26,0,-26,0,0,0,0,0,0,0,0,0,0,0,0,-26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,-1,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,-4,-4,-4,-4,-4,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0, 30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0},{-16,0,0,0,0,0,0,0,0,0,0, 18, 19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,17,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0, 34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0},{0,0,0, 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0},{0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0, 30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0},{-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{-16,0,0,0,0,0,0,0,0,0,0, 18, 19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,17,0,0,0},{-17,0,0,0,0,0,0,0,0,0,0,-17,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0, 39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0},{0,0,0, 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0},{-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,-2,-2,-2,-2,-2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,-6,-6,-6,-6,-6,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0, 39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0},{0,0,0,-3,-3,-3,-3,-3,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
int check(int state, int next);		//check how the action should be done from the state facing to this element,Shift out or Reduced\


/*//describe the production
struct{
	int leftEle;
	int rightNum;
} productionList[128];*/

//syntax analysis stack
#define synsize 256
int synStack[synsize];				//syntax stack
int syntop;
int synpush(int);
int synpop(int num);

//semantic analysis stack
typedef struct SemItem{
	int pnum;									//note down the num of *, for the pointer's define
	int type;									//note the type of the relop or Type,its value should be sth like the #define INT 6
	STID stiD;								//save the SymbolTable Item or the Address in the quadruple group四元式
	int boolIntent;						//TODO：means if the bool sentence want to make value or judge:value:2  judge:1
}SemItem;
SemItem *semStack;
int semsize, semtop;
int sempush(SemItem);
int sempop();

//other stack and tools
//stacklist
#define slistsize 64
typedef struct Slist{
	int* list[slistsize];				//回填的东西！！backpatching
	int length;
}Slist;
int addslist(Slist* slist,int* hole);
//liststack
#define lssize 64
Slist lstack[2][lssize];//one is Tstack and zero is Fstack
//Slist Fstack[lssize];
int lstop[2];			//1 for true and 0 for false
//int tstop, fstop;
int lspush(Slist, int TorF);			//true for Tstack
int lspop(int TorF);
int lscombine(Slist, int TorF);
int backpatch(int address, int TorF);